name: Backend Continuous Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger of the pipeline
name: Backend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  Linting:
    runs-on: ubuntu-latest
    environment: Development Environment

    steps:
    - name: Check the Repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Dependencies
      working-directory: starter/backend
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pip install flake8

    - name: Run Lint
      working-directory: starter/backend
      run: pipenv run lint

  Test:
    runs-on: ubuntu-latest

    steps:
    - name: Check the Repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Dependencies
      working-directory: starter/backend
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pip install flake8

    - name: Run Tests
      working-directory: starter/backend
      run: |
        pipenv install pytest
        pipenv run test

  Build:
    needs: [Linting, Test]
    runs-on: ubuntu-latest

    steps:
    - name: Check the Repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Docker Image
      working-directory: starter/backend
      env:
        IMAGE_TAG: latest
        REPO_NAME: backend
      run: |
        docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag ***.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .
        docker push 110584364041.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG

    - name: Update Kubeconfig
      run: |
        aws eks update-kubeconfig --name cluster --region us-east-1

    - name: Deploy Docker Image to Amazon EKS
      working-directory: starter/backend/k8s
      env:
        IMAGE_TAG: latest
        REPO_NAME: backend
      run: |
        kustomize edit set image backend=***.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
        kustomize build | kubectl apply -f -

    - name: Get Kubernetes Services -1
      run: kubectl get svc -A

    - name: Get Kubernetes Services -2
      run: kubectl get pods -A
jobs:
  # Lint Job
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Set the required Node.js version

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci  # Clean install of dependencies

      - name: Run linting
        run: npm run lint  # Lint the code

  # Test Job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Set the required Node.js version

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci  # Clean install of dependencies

      - name: Run tests
        run: npm run test  # Run the test command

  # Build, Push to ECR, and Deploy Job
  build_and_deploy:
    needs: [lint, test]  # Ensure this job runs only after lint and test jobs pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Set the required Node.js version

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci  # Clean install of dependencies

      - name: Build Docker image
        run: |
          docker build \
            -t backend-app:latest .
        
      # Set up AWS credentials using GitHub Secrets
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: AKIAZJDG7U3FZ4ZO43UT
          aws-secret-access-key: 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
          aws-region: us-east-1

    # Run the Docker login command to AWS ECR
      - name: Docker login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 638018627275.dkr.ecr.us-east-1.amazonaws.com

      - name: Push Docker image to ECR
        run: |
          docker tag backend-app:latest 638018627275.dkr.ecr.us-east-1.amazonaws.com/backend:latest
          docker push 638018627275.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      - name: Deploy to EKS using kubectl
        run: |
          aws eks --region us-east-1 update-kubeconfig --name cluster
          kubectl apply -f k8s/deployment.yaml  # Adjust path to your Kubernetes deployment file
          kubectl apply -f k8s/service.yaml
          

