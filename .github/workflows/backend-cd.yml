name: Backend Continuous Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger of the pipeline

jobs:
  # Lint Job
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Set the required Node.js version

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci  # Clean install of dependencies

      - name: Run linting
        run: npm run lint  # Lint the code

  # Test Job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Set the required Node.js version

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci  # Clean install of dependencies

      - name: Run tests
        run: npm run test  # Run the test command

  # Build, Push to ECR, and Deploy Job
  build_and_deploy:
    needs: [lint, test]  # Ensure this job runs only after lint and test jobs pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Set the required Node.js version

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci  # Clean install of dependencies

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ secrets.AWS_ECR_REPOSITORY }}:$GITHUB_SHA .
        
      - name: Log into Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Push Docker image to ECR
        run: |
          docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:$GITHUB_SHA \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:$GITHUB_SHA
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:$GITHUB_SHA

      - name: Deploy to Kubernetes cluster (EKS) using kubectl
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }}
          kubectl apply -f kubernetes/deployment.yaml  # Adjust path to your Kubernetes deployment file
          kubectl rollout status deployment/backend-deployment  # Ensure the deployment completes successfully

